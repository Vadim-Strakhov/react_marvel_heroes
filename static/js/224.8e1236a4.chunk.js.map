{"version":3,"file":"static/js/224.8e1236a4.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from \"./error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    //_ для обращения к папке publick\r\n    //   <img src={process.env.PUBLIC_URL + \"/error.gif\"} />\r\n    <img\r\n      style={{\r\n        display: \"block\",\r\n        width: \"250px\",\r\n        height: \"250px\",\r\n        objectFit: \"contain\",\r\n        margin: \"0 auto\",\r\n      }}\r\n      alt=\"img\"\r\n      src={img}\r\n    />\r\n  );\r\n};\r\nexport default ErrorMessage;\r\n","import \"./randomChar.scss\";\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\n\r\nimport mjolnir from \"../../resources/img/mjolnir.png\";\r\n\r\nimport setContent from \"../../utils/setContent\";\r\n\r\nconst RandomChar = () => {\r\n  const [char, setChar] = useState(null);\r\n  const { getCharacter, clearError, process, setProcess } = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateChar();\r\n    // const timerId = setInterval(updateChar, 60000);\r\n\r\n    return () => {\r\n      // clearInterval(timerId);\r\n    };\r\n  }, []);\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  //_ загрузка рандомного персонажа\r\n  const updateChar = () => {\r\n    clearError(); //_ для очистки ошибки и возобновления работы\r\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n    //_ запрос на сервер\r\n    getCharacter(id)\r\n      .then(onCharLoaded)\r\n      .then(() => setProcess(\"confirmed\"));\r\n  };\r\n\r\n  return (\r\n    <div className=\"randomchar\">\r\n      {setContent(process, View, char)}\r\n      <div className=\"randomchar__static\">\r\n        <p className=\"randomchar__title\">\r\n          Random character for today!\r\n          <br />\r\n          Do you want to get to know him better?\r\n        </p>\r\n        <p className=\"randomchar__title\">Or choose another one</p>\r\n        <button onClick={updateChar} className=\"button button__main\">\r\n          <div className=\"inner\">try it</div>\r\n        </button>\r\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst View = ({ data }) => {\r\n  const { name, description, thumbnail, homepage, wiki } = data;\r\n\r\n  let imgStyle = { objectFit: \"cover\" };\r\n\r\n  if (\r\n    thumbnail ===\r\n      \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" ||\r\n    thumbnail ===\r\n      \"http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif\"\r\n  ) {\r\n    imgStyle = { objectFit: \"contain\" };\r\n  }\r\n\r\n  return (\r\n    <div className=\"randomchar__block\">\r\n      <img\r\n        src={thumbnail}\r\n        alt=\"Random character\"\r\n        className=\"randomchar__img\"\r\n        style={imgStyle}\r\n      />\r\n      <div className=\"randomchar__info\">\r\n        <p className=\"randomchar__name\">{name}</p>\r\n        <p className=\"randomchar__descr\">{description}</p>\r\n        <div className=\"randomchar__btns\">\r\n          <a\r\n            href={homepage}\r\n            target=\"_blank\"\r\n            className=\"button button__main\"\r\n            rel=\"noreferrer\"\r\n          >\r\n            <div className=\"inner\">homepage</div>\r\n          </a>\r\n          <a\r\n            href={wiki}\r\n            target=\"_blank\"\r\n            className=\"button button__secondary\"\r\n            rel=\"noreferrer\"\r\n          >\r\n            <div className=\"inner\">Wiki</div>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RandomChar;\r\n","import \"./charList.scss\";\r\n\r\nimport React, { useState, useEffect, useRef, useMemo } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\n\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nconst setContent = (process, Component, newItemLoading) => {\r\n  switch (process) {\r\n    case \"waiting\":\r\n      return <Spinner />;\r\n    case \"loading\":\r\n      return newItemLoading ? <Component /> : <Spinner />;\r\n    case \"confirmed\":\r\n      return <Component />;\r\n    case \"error\":\r\n      return <ErrorMessage />;\r\n    default:\r\n      throw new Error(\"Unexpected process state\");\r\n  }\r\n};\r\n\r\nconst CharList = (props) => {\r\n  const [charList, setCharList] = useState([]);\r\n  const [newItemLoading, setNewItemLoading] = useState(false);\r\n  const [offset, setOffset] = useState(180);\r\n  const [charEnded, setCharEnded] = useState(false);\r\n\r\n  const { getAllCharacters, process, setProcess } = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    onRequest(offset, true);\r\n  }, []);\r\n\r\n  const onRequest = (offset, initial) => {\r\n    initial ? setNewItemLoading(false) : setNewItemLoading(true); //_ для исправление спиннера при дозагрузке персонажей\r\n    //_ запрос на сервер\r\n    getAllCharacters(offset)\r\n      .then(onCharListLoaded)\r\n      .then(() => setProcess(\"confirmed\"));\r\n  };\r\n\r\n  const onCharListLoaded = async (newCharList) => {\r\n    let ended = false;\r\n    if (newCharList.length < 9) {\r\n      ended = true;\r\n    }\r\n    //_ формирование новых данных и нового состояния, учитывая старое\r\n    setCharList((charList) => [...charList, ...newCharList]);\r\n    setNewItemLoading((newItemLoading) => false);\r\n    setOffset((offset) => offset + 9);\r\n    setCharEnded((charEnded) => ended);\r\n  };\r\n\r\n  //_ добавление персонажам фокуса при выборе с клавиатуры или мышкой\r\n  const itemRefs = useRef([]);\r\n\r\n  const focusOnItem = (id) => {\r\n    itemRefs.current.forEach((item) =>\r\n      item.classList.remove(\"char__item_selected\")\r\n    );\r\n    itemRefs.current[id].classList.add(\"char__item_selected\");\r\n    itemRefs.current[id].focus();\r\n  };\r\n\r\n  function renderItems(arr) {\r\n    // console.log(\"render\");\r\n    const items = arr.map((item, i) => {\r\n      let imgStyle = { objectFit: \"cover\" };\r\n      if (\r\n        item.thumbnail ===\r\n          \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" ||\r\n        item.thumbnail ===\r\n          \"http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif\"\r\n      ) {\r\n        imgStyle = { objectFit: \"unset\" };\r\n      }\r\n\r\n      return (\r\n        <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\r\n          <li\r\n            className=\"char__item\"\r\n            tabIndex={0}\r\n            ref={(el) => (itemRefs.current[i] = el)}\r\n            key={item.id}\r\n            onClick={() => {\r\n              props.onCharSelected(item.id);\r\n              focusOnItem(i);\r\n            }}\r\n            onKeyPress={(e) => {\r\n              if (e.key === \" \" || e.key === \"Enter\") {\r\n                props.onCharSelected(item.id);\r\n                focusOnItem(i);\r\n              }\r\n            }}\r\n          >\r\n            <img src={item.thumbnail} alt={item.name} style={imgStyle} />\r\n            <div className=\"char__name\">{item.name}</div>\r\n          </li>\r\n        </CSSTransition>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <ul className=\"char__grid\">\r\n        <TransitionGroup component={null}>{items}</TransitionGroup>\r\n      </ul>\r\n    );\r\n  }\r\n\r\n  //_ исправление ошибки с фокусом\r\n  const elements = useMemo(() => {\r\n    return setContent(process, () => renderItems(charList), newItemLoading);\r\n  }, [process]);\r\n\r\n  return (\r\n    <div className=\"char__list\">\r\n      {elements}\r\n      <button\r\n        disabled={newItemLoading}\r\n        className=\"button button__main button__long\"\r\n        style={{ display: charEnded ? \"none\" : \"block\" }}\r\n        onClick={() => onRequest(offset)}\r\n      >\r\n        <div className=\"inner\">load more</div>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nCharList.propTypes = {\r\n  onCharSelected: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default CharList;\r\n","import \"./charInfo.scss\";\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport setContent from \"../../utils/setContent\";\r\n\r\nconst CharInfo = (props) => {\r\n  const [char, setChar] = useState(null);\r\n\r\n  const { getCharacter, clearError, process, setProcess } = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateChar();\r\n  }, [props.charId]);\r\n\r\n  const updateChar = () => {\r\n    const { charId } = props;\r\n    if (!charId) {\r\n      return;\r\n    }\r\n\r\n    //_ очистка ошибки\r\n    clearError();\r\n    //_ запрос на сервер\r\n    getCharacter(charId)\r\n      .then(onCharLoaded)\r\n      .then(() => setProcess(\"confirmed\"));\r\n  };\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  return <div className=\"char__info\">{setContent(process, View, char)}</div>;\r\n};\r\n\r\nconst View = ({ data }) => {\r\n  const { name, description, thumbnail, homepage, wiki, comics } = data;\r\n\r\n  let imgStyle = { objectFit: \"cover\" };\r\n  if (\r\n    thumbnail ===\r\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\r\n  ) {\r\n    imgStyle = { objectFit: \"contain\" };\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"char__basics\">\r\n        <img src={thumbnail} alt={name} style={imgStyle} />\r\n        <div>\r\n          <div className=\"char__info-name\">{name}</div>\r\n          <div className=\"char__btns\">\r\n            <a\r\n              href={homepage}\r\n              target=\"_blank\"\r\n              className=\"button button__main\"\r\n              rel=\"noreferrer\"\r\n            >\r\n              <div className=\"inner\">homepage</div>\r\n            </a>\r\n            <a\r\n              href={wiki}\r\n              target=\"_blank\"\r\n              className=\"button button__secondary\"\r\n              rel=\"noreferrer\"\r\n            >\r\n              <div className=\"inner\">Wiki</div>\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"char__descr\">{description}</div>\r\n      <div className=\"char__comics\">Comics:</div>\r\n      <ul className=\"char__comics-list\">\r\n        {comics.length > 0 ? null : \"There is no comics with this character\"}\r\n        {comics.map((item, i) => {\r\n          if (i > 9) return; //_ для ограничения числа комиксов в информации о персонаже\r\n          return (\r\n            <li key={i} className=\"char__comics-item\">\r\n              {item.name}\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nCharInfo.propTypes = {\r\n  charId: PropTypes.number,\r\n};\r\n\r\nexport default CharInfo;\r\n","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  };\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    console.log(error, errorInfo);\r\n    this.setState({\r\n      error: true,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage />;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import \"./charSearchForm.scss\";\r\n\r\nimport { useState } from \"react\";\r\nimport {\r\n  Formik,\r\n  Form,\r\n  Field,\r\n  ErrorMessage as FormikErrorMessage,\r\n} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nconst CharSearchForm = () => {\r\n  const [char, setChar] = useState(null);\r\n  const { getCharacterByName, clearError, process, setProcess } =\r\n    useMarvelService();\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  const updateChar = (name) => {\r\n    clearError();\r\n\r\n    getCharacterByName(name)\r\n      .then(onCharLoaded)\r\n      .then(() => setProcess(\"confirmed\"));\r\n  };\r\n\r\n  const errorMessage =\r\n    process === \"error\" ? (\r\n      <div className=\"char__search-critical-error\">\r\n        <ErrorMessage />\r\n      </div>\r\n    ) : null;\r\n\r\n  const results = !char ? null : char.length > 0 ? (\r\n    <div className=\"char__search-wrapper\">\r\n      <div className=\"char__search-success\">\r\n        There is! Visit {char[0].name} page?\r\n      </div>\r\n      <Link\r\n        to={`/react_marvel_heroes/characters/${char[0].id}`}\r\n        className=\"button button__secondary\"\r\n      >\r\n        <div className=\"inner\">To page</div>\r\n      </Link>\r\n    </div>\r\n  ) : (\r\n    <div className=\"char__search-error\">\r\n      The character was not found. Check the name and try again\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"char__search-form\">\r\n      <Formik\r\n        initialValues={{ charName: \"\" }}\r\n        validationSchema={Yup.object({\r\n          charName: Yup.string().required(\"This field is required\"),\r\n        })}\r\n        onSubmit={({ charName }) => {\r\n          updateChar(charName);\r\n        }}\r\n      >\r\n        <Form>\r\n          <label className=\"char__search-label\" htmlFor=\"charName\">\r\n            Or find a character by name:\r\n          </label>\r\n          <div className=\"char__search-wrapper\">\r\n            <Field\r\n              id=\"charName\"\r\n              name=\"charName\"\r\n              type=\"text\"\r\n              placeholder=\"Enter name\"\r\n            />\r\n            <button\r\n              type=\"submit\"\r\n              className=\"button button__main\"\r\n              disabled={process === \"loading\"}\r\n            >\r\n              <div className=\"inner\">find</div>\r\n            </button>\r\n          </div>\r\n          <FormikErrorMessage\r\n            component=\"div\"\r\n            className=\"char__search-error\"\r\n            name=\"charName\"\r\n          />\r\n        </Form>\r\n      </Formik>\r\n      {results}\r\n      {errorMessage}\r\n    </div>\r\n  );\r\n};\r\nexport default CharSearchForm;\r\n","import React, { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from \"../../resources/img/vision.png\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\n\r\nconst MainPage = () => {\r\n  const [selectedChar, setChar] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setChar(id);\r\n  };\r\n  // console.log(\"mp\");\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta name=\"description\" content=\"Marvel information portal\" />\r\n        <title>Marvel information portal</title>\r\n      </Helmet>\r\n      {/* // _ предохранитель для ошибок */}\r\n      <ErrorBoundary>\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList onCharSelected={onCharSelected} />\r\n        </ErrorBoundary>\r\n        <div>\r\n          <ErrorBoundary>\r\n            <CharInfo charId={selectedChar} />\r\n          </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <CharSearchForm />\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [process, setProcess] = useState(\"waiting\");\r\n\r\n  //_ запрос на сервер\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      //_ состояние загрузки\r\n      setProcess(\"loading\");\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        return data;\r\n      } catch (e) {\r\n        //_ если ошибка\r\n\r\n        setProcess(\"error\");\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => {\r\n    setProcess(\"loading\");\r\n  }); //_ для очистки ошибки и возобновления работы\r\n\r\n  return { request, clearError, process, setProcess };\r\n};\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { request, clearError, process, setProcess } = useHttp();\r\n\r\n  const apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const apiKey = \"apikey=b860ae4f50120b46e53bb6d38bbb7db4\";\r\n  const baseOffset = 180;\r\n\r\n  //_ получение всех персонажей\r\n  const getAllCharacters = async (offset = baseOffset) => {\r\n    const res = await request(\r\n      `${apiBase}characters?limit=9&offset=${offset}&${apiKey}`\r\n    );\r\n    // console.log(res);\r\n    // console.log(\"Current offset:\", offset);\r\n    return res.data.results.map(transformCharacter);\r\n  };\r\n  //_ получение персонажа по id\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${apiBase}/characters/${id}?&${apiKey}`);\r\n    // console.log(res);\r\n    return transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  //_ поиск по имени\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${apiBase}/characters?name=${name}&${apiKey}`);\r\n    // console.log(res.data.results.map(transformCharacter));\r\n    return res.data.results.map(transformCharacter);\r\n  };\r\n\r\n  //_ получение всех комиксов\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(\r\n      `${apiBase}comics?limit=8&offset=${offset}&${apiKey}`\r\n    );\r\n    // console.log(res.data.results.map(transformComics));\r\n    return res.data.results.map(transformComics);\r\n  };\r\n\r\n  //_ получение комикса по id\r\n  const getComic = async (id) => {\r\n    const res = await request(`${apiBase}comics/${id}?${apiKey}`);\r\n    // console.log(transformComics(res.data.results[0]));\r\n    return transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : \"There is no description for this character\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || \"There is no description\",\r\n      pageCount: comics.pageCount\r\n        ? `${comics.pageCount} p.`\r\n        : \"No information about the number of pages\",\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      language: comics.textObjects[0]?.language || \"en-us\",\r\n      price: comics.prices[0].price\r\n        ? `${comics.prices[0].price}$`\r\n        : \"not available\",\r\n      url: comics.urls[0].url,\r\n    };\r\n  };\r\n\r\n  return {\r\n    process,\r\n    setProcess,\r\n    clearError,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    getAllComics,\r\n    getComic,\r\n    getCharacterByName,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import \"./skeleton.scss\";\n\nconst Skeleton = () => {\n  return (\n    <>\n      <p className=\"char__select\">\n        Please select a character to see information\n      </p>\n      <div className=\"skeleton\">\n        <div className=\"pulse skeleton__header\">\n          <div className=\"pulse skeleton__circle\"></div>\n          <div className=\"pulse skeleton__mini\"></div>\n        </div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n      </div>\n    </>\n  );\n};\n\nexport default Skeleton;\n","import ErrorMessage from \"../components/errorMessage/ErrorMessage\";\r\nimport Spinner from \"../components/spinner/Spinner\";\r\nimport Skeleton from \"../components/skeleton/Skeleton\";\r\n\r\nconst setContent = (process, Component, data) => {\r\n  switch (process) {\r\n    case \"waiting\":\r\n      return <Skeleton />;\r\n    case \"loading\":\r\n      return <Spinner />;\r\n    case \"confirmed\":\r\n      return <Component data={data} />;\r\n    case \"error\":\r\n      return <ErrorMessage />;\r\n    default:\r\n      throw new Error(\"Unexpected process state\");\r\n  }\r\n};\r\n\r\nexport default setContent;\r\n"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","alt","src","img","View","_ref","data","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","target","rel","RandomChar","char","setChar","useState","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","async","ended","newCharList","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","Error","arr","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","comics","_Fragment","charId","ErrorBoundary","constructor","arguments","state","error","componentDidCatch","errorInfo","console","log","this","setState","render","CharSearchForm","getCharacterByName","errorMessage","results","Link","to","concat","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","MainPage","selectedChar","Helmet","content","CharList","CharInfo","decoration","request","useHttp","useCallback","url","method","undefined","body","headers","response","fetch","ok","status","json","apiBase","apiKey","transformCharacter","slice","path","extension","urls","transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","res","getAllComics","getComic","Skeleton"],"sourceRoot":""}
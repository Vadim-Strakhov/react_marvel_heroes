{"version":3,"file":"static/js/363.d148cd20.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/pages/SingleComicPage/SingleComicPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import img from \"./error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    //_ для обращения к папке publick\r\n    //   <img src={process.env.PUBLIC_URL + \"/error.gif\"} />\r\n    <img\r\n      style={{\r\n        display: \"block\",\r\n        width: \"250px\",\r\n        height: \"250px\",\r\n        objectFit: \"contain\",\r\n        margin: \"0 auto\",\r\n      }}\r\n      alt=\"img\"\r\n      src={img}\r\n    />\r\n  );\r\n};\r\nexport default ErrorMessage;\r\n","import { useParams, Link } from \"react-router-dom\";\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nimport useMarvelService from \"../../../services/MarvelService\";\r\nimport ErrorMessage from \"../../errorMessage/ErrorMessage\";\r\nimport Spinner from \"../../spinner/Spinner\";\r\n\r\nimport \"./singleComicPage.scss\";\r\n\r\nconst SingleComicPage = () => {\r\n  const { comicId } = useParams();\r\n  const [comic, setComic] = useState(null);\r\n\r\n  const { loading, error, getComic, clearError } = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateComic();\r\n  }, [comicId]);\r\n\r\n  const updateComic = () => {\r\n    //_ очистка ошибки\r\n    clearError();\r\n    //_ запрос на сервер\r\n    getComic(comicId).then(onComicLoaded);\r\n  };\r\n\r\n  const onComicLoaded = (comic) => {\r\n    setComic(comic);\r\n  };\r\n\r\n  const errorMessage = error ? <ErrorMessage /> : null; //_ если произошла ошибка\r\n  const spinner = loading ? <Spinner /> : null; //_ спиннер загрузки\r\n  const content = !(loading || error || !comic) ? <View comic={comic} /> : null; //_ если все загрузилось\r\n\r\n  return (\r\n    <>\r\n      {errorMessage}\r\n      {spinner}\r\n      {content}\r\n    </>\r\n  );\r\n};\r\n\r\nconst View = ({ comic }) => {\r\n  const { title, description, pageCount, thumbnail, language, price } = comic;\r\n\r\n  return (\r\n    <div className=\"single-comic\">\r\n      <img src={thumbnail} alt={title} className=\"single-comic__img\" />\r\n      <div className=\"single-comic__info\">\r\n        <h2 className=\"single-comic__name\">{title}</h2>\r\n        <p className=\"single-comic__descr\">{description}</p>\r\n        <p className=\"single-comic__descr\">{pageCount}</p>\r\n        <p className=\"single-comic__descr\">Language: {language}</p>\r\n        <div className=\"single-comic__price\">{price}</div>\r\n      </div>\r\n      <Link to=\"/react_marvel_heroes/comics\" className=\"single-comic__back\">\r\n        Back to all\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SingleComicPage;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  //_ запрос на сервер\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      //_ состояние загрузки\r\n      setLoading(true);\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        setLoading(false);\r\n        return data;\r\n      } catch (e) {\r\n        //_ если ошибка\r\n        setLoading(false);\r\n        setError(e.message);\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => setError(null), []); //_ для очистки ошибки и возобновления работы\r\n\r\n  return { loading, request, error, clearError };\r\n};\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, request, error, clearError } = useHttp();\r\n\r\n  const apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const apiKey = \"apikey=b860ae4f50120b46e53bb6d38bbb7db4\";\r\n  const baseOffset = 180;\r\n\r\n  //_ получение всех персонажей\r\n  const getAllCharacters = async (offset = baseOffset) => {\r\n    const res = await request(\r\n      `${apiBase}characters?limit=9&offset=${offset}&${apiKey}`\r\n    );\r\n    // console.log(res);\r\n    // console.log(\"Current offset:\", offset);\r\n    return res.data.results.map(transformCharacter);\r\n  };\r\n  //_ получение персонажа по id\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${apiBase}/characters/${id}?&${apiKey}`);\r\n    // console.log(res);\r\n    return transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : \"There is no description for this character\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(\r\n      `${apiBase}comics?limit=8&offset=${offset}&${apiKey}`\r\n    );\r\n    // console.log(res.data.results.map(transformComics));\r\n    return res.data.results.map(transformComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${apiBase}comics/${id}?${apiKey}`);\r\n    console.log(transformComics(res.data.results[0]));\r\n    return transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || \"There is no description\",\r\n      pageCount: comics.pageCount\r\n        ? `${comics.pageCount} p.`\r\n        : \"No information about the number of pages\",\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      language: comics.textObjects[0]?.language || \"en-us\",\r\n      price: comics.prices[0].price\r\n        ? `${comics.prices[0].price}$`\r\n        : \"not available\",\r\n      url: comics.urls[0].url,\r\n    };\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    clearError,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    getAllComics,\r\n    getComic,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","alt","src","img","View","_ref","comic","title","description","pageCount","thumbnail","language","price","_jsxs","className","children","Link","to","SingleComicPage","comicId","useParams","setComic","useState","loading","error","getComic","clearError","useMarvelService","useEffect","updateComic","then","onComicLoaded","errorMessage","spinner","Spinner","content","_Fragment","request","useHttp","setLoading","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","e","message","apiBase","apiKey","transformCharacter","char","id","name","slice","path","extension","homepage","urls","wiki","comics","items","transformComics","_comics$textObjects$","textObjects","prices","getAllCharacters","offset","results","map","getCharacter","res","getAllComics","console","log"],"sourceRoot":""}
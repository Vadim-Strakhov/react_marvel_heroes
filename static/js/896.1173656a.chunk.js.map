{"version":3,"file":"static/js/896.1173656a.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import img from \"./error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    //_ для обращения к папке publick\r\n    //   <img src={process.env.PUBLIC_URL + \"/error.gif\"} />\r\n    <img\r\n      style={{\r\n        display: \"block\",\r\n        width: \"250px\",\r\n        height: \"250px\",\r\n        objectFit: \"contain\",\r\n        margin: \"0 auto\",\r\n      }}\r\n      alt=\"img\"\r\n      src={img}\r\n    />\r\n  );\r\n};\r\nexport default ErrorMessage;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\n\r\nimport \"./randomChar.scss\";\r\n\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport mjolnir from \"../../resources/img/mjolnir.png\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nconst RandomChar = () => {\r\n  const [char, setChar] = useState(null);\r\n  const { loading, error, getCharacter, clearError } = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateChar();\r\n    // const timerId = setInterval(updateChar, 60000);\r\n\r\n    return () => {\r\n      // clearInterval(timerId);\r\n    };\r\n  }, []);\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  //_ загрузка рандомного персонажа\r\n  const updateChar = () => {\r\n    clearError(); //_ для очистки ошибки и возобновления работы\r\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n    //_ запрос на сервер\r\n    getCharacter(id).then(onCharLoaded);\r\n  };\r\n\r\n  const errorMessage = error ? <ErrorMessage /> : null; //_ если произошла ошибка\r\n  const spinner = loading ? <Spinner /> : null; //_ спиннер загрузки\r\n  const content = !(loading || error || !char) ? <View char={char} /> : null; //_ если все загрузилось\r\n\r\n  return (\r\n    <div className=\"randomchar\">\r\n      {errorMessage}\r\n      {spinner}\r\n      {content}\r\n      <div className=\"randomchar__static\">\r\n        <p className=\"randomchar__title\">\r\n          Random character for today!\r\n          <br />\r\n          Do you want to get to know him better?\r\n        </p>\r\n        <p className=\"randomchar__title\">Or choose another one</p>\r\n        <button onClick={updateChar} className=\"button button__main\">\r\n          <div className=\"inner\">try it</div>\r\n        </button>\r\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst View = ({ char }) => {\r\n  const { name, description, thumbnail, homepage, wiki } = char;\r\n\r\n  let imgStyle = { objectFit: \"cover\" };\r\n\r\n  if (\r\n    thumbnail ===\r\n      \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" ||\r\n    thumbnail ===\r\n      \"http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif\"\r\n  ) {\r\n    imgStyle = { objectFit: \"contain\" };\r\n  }\r\n\r\n  return (\r\n    <div className=\"randomchar__block\">\r\n      <img\r\n        src={thumbnail}\r\n        alt=\"Random character\"\r\n        className=\"randomchar__img\"\r\n        style={imgStyle}\r\n      />\r\n      <div className=\"randomchar__info\">\r\n        <p className=\"randomchar__name\">{name}</p>\r\n        <p className=\"randomchar__descr\">{description}</p>\r\n        <div className=\"randomchar__btns\">\r\n          <a\r\n            href={homepage}\r\n            target=\"_blank\"\r\n            className=\"button button__main\"\r\n            rel=\"noreferrer\"\r\n          >\r\n            <div className=\"inner\">homepage</div>\r\n          </a>\r\n          <a\r\n            href={wiki}\r\n            target=\"_blank\"\r\n            className=\"button button__secondary\"\r\n            rel=\"noreferrer\"\r\n          >\r\n            <div className=\"inner\">Wiki</div>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RandomChar;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./charList.scss\";\r\n\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nimport Spinner from \"../spinner/Spinner\";\r\n\r\nconst CharList = (props) => {\r\n  const [charList, setCharList] = useState([]);\r\n  const [newItemLoading, setNewItemLoading] = useState(false);\r\n  const [offset, setOffset] = useState(180);\r\n  const [charEnded, setCharEnded] = useState(false);\r\n\r\n  const { loading, error, getAllCharacters } = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    onRequest(offset, true);\r\n  }, []);\r\n\r\n  const onRequest = (offset, initial) => {\r\n    initial ? setNewItemLoading(false) : setNewItemLoading(true); //_ для исправление спиннера при дозагрузке персонажей\r\n    //_ запрос на сервер\r\n    getAllCharacters(offset).then(onCharListLoaded);\r\n  };\r\n\r\n  const onCharListLoaded = async (newCharList) => {\r\n    let ended = false;\r\n    if (newCharList.length < 9) {\r\n      ended = true;\r\n    }\r\n    //_ формирование новых данных и нового состояния, учитывая старое\r\n    setCharList((charList) => [...charList, ...newCharList]);\r\n    setNewItemLoading((newItemLoading) => false);\r\n    setOffset((offset) => offset + 9);\r\n    setCharEnded((charEnded) => ended);\r\n  };\r\n\r\n  //_ добавление персонажам фокуса при выборе с клавиатуры или мышкой\r\n  const itemRefs = useRef([]);\r\n\r\n  const focusOnItem = (id) => {\r\n    itemRefs.current.forEach((item) =>\r\n      item.classList.remove(\"char__item_selected\")\r\n    );\r\n    itemRefs.current[id].classList.add(\"char__item_selected\");\r\n    itemRefs.current[id].focus();\r\n  };\r\n\r\n  function renderItems(arr) {\r\n    const items = arr.map((item, i) => {\r\n      let imgStyle = { objectFit: \"cover\" };\r\n      if (\r\n        item.thumbnail ===\r\n          \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" ||\r\n        item.thumbnail ===\r\n          \"http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif\"\r\n      ) {\r\n        imgStyle = { objectFit: \"unset\" };\r\n      }\r\n\r\n      return (\r\n        <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\r\n          <li\r\n            className=\"char__item\"\r\n            tabIndex={0}\r\n            ref={(el) => (itemRefs.current[i] = el)}\r\n            key={item.id}\r\n            onClick={() => {\r\n              props.onCharSelected(item.id);\r\n              focusOnItem(i);\r\n            }}\r\n            onKeyPress={(e) => {\r\n              if (e.key === \" \" || e.key === \"Enter\") {\r\n                props.onCharSelected(item.id);\r\n                focusOnItem(i);\r\n              }\r\n            }}\r\n          >\r\n            <img src={item.thumbnail} alt={item.name} style={imgStyle} />\r\n            <div className=\"char__name\">{item.name}</div>\r\n          </li>\r\n        </CSSTransition>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <ul className=\"char__grid\">\r\n        <TransitionGroup component={null}>{items}</TransitionGroup>\r\n      </ul>\r\n    );\r\n  }\r\n\r\n  const items = renderItems(charList); //_ статичный контент, чтобы не было перерисовки при дозагрузке персонажей\r\n\r\n  const errorMessage = error ? <ErrorMessage /> : null; //_ если произошла ошибка\r\n  const spinner = loading && !newItemLoading ? <Spinner /> : null; //_ спиннер загрузки\r\n\r\n  return (\r\n    <div className=\"char__list\">\r\n      {errorMessage}\r\n      {spinner}\r\n      {items}\r\n      <button\r\n        className=\"button button__main button__long\"\r\n        disabled={newItemLoading}\r\n        style={{ display: charEnded ? \"none\" : \"block\" }}\r\n        onClick={() => onRequest(offset)}\r\n      >\r\n        <div className=\"inner\">load more</div>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nCharList.propTypes = {\r\n  onCharSelected: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default CharList;\r\n","import \"./skeleton.scss\";\n\nconst Skeleton = () => {\n  return (\n    <>\n      <p className=\"char__select\">\n        Please select a character to see information\n      </p>\n      <div className=\"skeleton\">\n        <div className=\"pulse skeleton__header\">\n          <div className=\"pulse skeleton__circle\"></div>\n          <div className=\"pulse skeleton__mini\"></div>\n        </div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n      </div>\n    </>\n  );\n};\n\nexport default Skeleton;\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./charInfo.scss\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport Skeleton from \"../skeleton/Skeleton\";\r\n\r\nconst CharInfo = (props) => {\r\n  const [char, setChar] = useState(null);\r\n\r\n  const { loading, error, getCharacter, clearError } = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateChar();\r\n  }, [props.charId]);\r\n\r\n  const updateChar = () => {\r\n    const { charId } = props;\r\n    if (!charId) {\r\n      return;\r\n    }\r\n\r\n    //_ очистка ошибки\r\n    clearError();\r\n    //_ запрос на сервер\r\n    getCharacter(charId).then(onCharLoaded);\r\n  };\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  const skeleton = char || loading || error ? null : <Skeleton />;\r\n\r\n  const errorMessage = error ? <ErrorMessage /> : null; //_ если произошла ошибка\r\n  const spinner = loading ? <Spinner /> : null; //_ спиннер загрузки\r\n  const content = !(loading || error || !char) ? <View char={char} /> : null; //_ если все загрузилось\r\n\r\n  return (\r\n    <div className=\"char__info\">\r\n      {skeleton}\r\n      {errorMessage}\r\n      {spinner}\r\n      {content}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst View = ({ char }) => {\r\n  const { name, description, thumbnail, homepage, wiki, comics } = char;\r\n\r\n  let imgStyle = { objectFit: \"cover\" };\r\n  if (\r\n    thumbnail ===\r\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\r\n  ) {\r\n    imgStyle = { objectFit: \"contain\" };\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"char__basics\">\r\n        <img src={thumbnail} alt={name} style={imgStyle} />\r\n        <div>\r\n          <div className=\"char__info-name\">{name}</div>\r\n          <div className=\"char__btns\">\r\n            <a\r\n              href={homepage}\r\n              target=\"_blank\"\r\n              className=\"button button__main\"\r\n              rel=\"noreferrer\"\r\n            >\r\n              <div className=\"inner\">homepage</div>\r\n            </a>\r\n            <a\r\n              href={wiki}\r\n              target=\"_blank\"\r\n              className=\"button button__secondary\"\r\n              rel=\"noreferrer\"\r\n            >\r\n              <div className=\"inner\">Wiki</div>\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"char__descr\">{description}</div>\r\n      <div className=\"char__comics\">Comics:</div>\r\n      <ul className=\"char__comics-list\">\r\n        {comics.length > 0 ? null : \"There is no comics with this character\"}\r\n        {comics.map((item, i) => {\r\n          if (i > 9) return; //_ для ограничения числа комиксов в информации о персонаже\r\n          return (\r\n            <li key={i} className=\"char__comics-item\">\r\n              {item.name}\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nCharInfo.propTypes = {\r\n  charId: PropTypes.number,\r\n};\r\n\r\nexport default CharInfo;\r\n","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  };\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    console.log(error, errorInfo);\r\n    this.setState({\r\n      error: true,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage />;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import { useState } from \"react\";\r\nimport {\r\n  Formik,\r\n  Form,\r\n  Field,\r\n  ErrorMessage as FormikErrorMessage,\r\n} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nimport \"./charSearchForm.scss\";\r\n\r\nconst CharSearchForm = () => {\r\n  const [char, setChar] = useState(null);\r\n  const { loading, error, getCharacterByName, clearError } = useMarvelService();\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  const updateChar = (name) => {\r\n    clearError();\r\n\r\n    getCharacterByName(name).then(onCharLoaded);\r\n  };\r\n\r\n  const errorMessage = error ? (\r\n    <div className=\"char__search-critical-error\">\r\n      <ErrorMessage />\r\n    </div>\r\n  ) : null;\r\n\r\n  const results = !char ? null : char.length > 0 ? (\r\n    <div className=\"char__search-wrapper\">\r\n      <div className=\"char__search-success\">\r\n        There is! Visit {char[0].name} page?\r\n      </div>\r\n      <Link\r\n        to={`/react_marvel_heroes/characters/${char[0].id}`}\r\n        className=\"button button__secondary\"\r\n      >\r\n        <div className=\"inner\">To page</div>\r\n      </Link>\r\n    </div>\r\n  ) : (\r\n    <div className=\"char__search-error\">\r\n      The character was not found. Check the name and try again\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"char__search-form\">\r\n      <Formik\r\n        initialValues={{ charName: \"\" }}\r\n        validationSchema={Yup.object({\r\n          charName: Yup.string().required(\"This field is required\"),\r\n        })}\r\n        onSubmit={({ charName }) => {\r\n          updateChar(charName);\r\n        }}\r\n      >\r\n        <Form>\r\n          <label className=\"char__search-label\" htmlFor=\"charName\">\r\n            Or find a character by name:\r\n          </label>\r\n          <div className=\"char__search-wrapper\">\r\n            <Field\r\n              id=\"charName\"\r\n              name=\"charName\"\r\n              type=\"text\"\r\n              placeholder=\"Enter name\"\r\n            />\r\n            <button\r\n              type=\"submit\"\r\n              className=\"button button__main\"\r\n              disabled={loading}\r\n            >\r\n              <div className=\"inner\">find</div>\r\n            </button>\r\n          </div>\r\n          <FormikErrorMessage\r\n            component=\"div\"\r\n            className=\"char__search-error\"\r\n            name=\"charName\"\r\n          />\r\n        </Form>\r\n      </Formik>\r\n      {results}\r\n      {errorMessage}\r\n    </div>\r\n  );\r\n};\r\nexport default CharSearchForm;\r\n","import React, { useState } from \"react\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from \"../../resources/img/vision.png\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\n\r\nconst MainPage = () => {\r\n  const [selectedChar, setChar] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setChar(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* // _ предохранитель для ошибок */}\r\n      <ErrorBoundary>\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList onCharSelected={onCharSelected} />\r\n        </ErrorBoundary>\r\n        <div>\r\n          <ErrorBoundary>\r\n            <CharInfo charId={selectedChar} />\r\n          </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <CharSearchForm />\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  //_ запрос на сервер\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      //_ состояние загрузки\r\n      setLoading(true);\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        setLoading(false);\r\n        return data;\r\n      } catch (e) {\r\n        //_ если ошибка\r\n        setLoading(false);\r\n        setError(e.message);\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => setError(null), []); //_ для очистки ошибки и возобновления работы\r\n\r\n  return { loading, request, error, clearError };\r\n};\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, request, error, clearError } = useHttp();\r\n\r\n  const apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const apiKey = \"apikey=b860ae4f50120b46e53bb6d38bbb7db4\";\r\n  const baseOffset = 180;\r\n\r\n  //_ получение всех персонажей\r\n  const getAllCharacters = async (offset = baseOffset) => {\r\n    const res = await request(\r\n      `${apiBase}characters?limit=9&offset=${offset}&${apiKey}`\r\n    );\r\n    // console.log(res);\r\n    // console.log(\"Current offset:\", offset);\r\n    return res.data.results.map(transformCharacter);\r\n  };\r\n  //_ получение персонажа по id\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${apiBase}/characters/${id}?&${apiKey}`);\r\n    // console.log(res);\r\n    return transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  //_ поиск по имени\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${apiBase}/characters?name=${name}&${apiKey}`);\r\n    // console.log(res.data.results.map(transformCharacter));\r\n    return res.data.results.map(transformCharacter);\r\n  };\r\n\r\n  //_ получение всех комиксов\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(\r\n      `${apiBase}comics?limit=8&offset=${offset}&${apiKey}`\r\n    );\r\n    // console.log(res.data.results.map(transformComics));\r\n    return res.data.results.map(transformComics);\r\n  };\r\n\r\n  //_ получение комикса по id\r\n  const getComic = async (id) => {\r\n    const res = await request(`${apiBase}comics/${id}?${apiKey}`);\r\n    // console.log(transformComics(res.data.results[0]));\r\n    return transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : \"There is no description for this character\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || \"There is no description\",\r\n      pageCount: comics.pageCount\r\n        ? `${comics.pageCount} p.`\r\n        : \"No information about the number of pages\",\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      language: comics.textObjects[0]?.language || \"en-us\",\r\n      price: comics.prices[0].price\r\n        ? `${comics.prices[0].price}$`\r\n        : \"not available\",\r\n      url: comics.urls[0].url,\r\n    };\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    clearError,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    getAllComics,\r\n    getComic,\r\n    getCharacterByName,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","alt","src","img","View","_ref","char","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","target","rel","RandomChar","setChar","useState","loading","error","getCharacter","clearError","useMarvelService","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","async","ended","newCharList","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","Skeleton","_Fragment","comics","charId","skeleton","ErrorBoundary","Component","constructor","arguments","state","componentDidCatch","errorInfo","console","log","this","setState","render","CharSearchForm","getCharacterByName","results","Link","to","concat","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","MainPage","selectedChar","CharList","CharInfo","decoration","request","useHttp","setLoading","setError","useCallback","url","method","undefined","body","headers","response","fetch","ok","Error","status","data","json","message","apiBase","apiKey","transformCharacter","slice","path","extension","urls","transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","res","getAllComics","getComic"],"sourceRoot":""}
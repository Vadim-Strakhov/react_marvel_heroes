{"version":3,"file":"static/js/682.3913d8a4.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import \"./appBanner.scss\";\nimport avengers from \"../../resources/img/Avengers.png\";\nimport avengersLogo from \"../../resources/img/Avengers_logo.png\";\n\nconst AppBanner = () => {\n  return (\n    <div className=\"app__banner\">\n      <img src={avengers} alt=\"Avengers\" />\n      <div className=\"app__banner-text\">\n        New comics every week!\n        <br />\n        Stay tuned!\n      </div>\n      <img src={avengersLogo} alt=\"Avengers logo\" />\n    </div>\n  );\n};\n\nexport default AppBanner;\n","import img from \"./error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    //_ для обращения к папке publick\r\n    //   <img src={process.env.PUBLIC_URL + \"/error.gif\"} />\r\n    <img\r\n      style={{\r\n        display: \"block\",\r\n        width: \"250px\",\r\n        height: \"250px\",\r\n        objectFit: \"contain\",\r\n        margin: \"0 auto\",\r\n      }}\r\n      alt=\"img\"\r\n      src={img}\r\n    />\r\n  );\r\n};\r\nexport default ErrorMessage;\r\n","import React, { useState, useEffect } from \"react\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport { Link } from \"react-router-dom\";\n\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\n\nimport \"./comicsList.scss\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Spinner from \"../spinner/Spinner\";\n\nconst ComicsList = () => {\n  const [comicsList, setComicsList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(100);\n  const [comicsEnded, setComicsEnded] = useState(false);\n\n  const { loading, error, getAllComics } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllComics(offset).then(onComicsListLoaded);\n  };\n\n  const onComicsListLoaded = (newComicsList) => {\n    let ended = false;\n    if (newComicsList.length > 8) {\n      ended = true;\n    }\n    setComicsList([...comicsList, ...newComicsList]);\n    setNewItemLoading(false);\n    setOffset(offset + 8);\n    setComicsEnded(ended);\n  };\n\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      return (\n        <CSSTransition key={item.id} timeout={500} classNames=\"comics__item\">\n          <li key={item.id + i} className=\"comics__item\">\n            <Link to={`/react_marvel_heroes/comics/${item.id}`}>\n              <img\n                src={item.thumbnail}\n                alt={item.title}\n                className=\"comics__item-img\"\n              />\n              <div className=\"comics__item-name\">{item.title}</div>\n              <div className=\"comics__item-price\">{item.price}</div>\n            </Link>\n          </li>\n        </CSSTransition>\n      );\n    });\n\n    return (\n      <ul className=\"comics__grid\">\n        <TransitionGroup component={null}>{items}</TransitionGroup>\n      </ul>\n    );\n  }\n\n  const items = renderItems(comicsList);\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n  return (\n    <div className=\"comics__list\">\n      {errorMessage}\n      {spinner}\n      {items}\n      <button\n        disabled={newItemLoading}\n        style={{ display: comicsEnded ? \"none\" : \"block\" }}\n        className=\"button button__main button__long\"\n        onClick={() => onRequest(offset)}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nexport default ComicsList;\n","import ComicsList from \"../comicsList/ComicsList\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\nconst ComicsPage = () => {\r\n  return (\r\n    <>\r\n      <AppBanner />\r\n      <ComicsList />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ComicsPage;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  //_ запрос на сервер\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      //_ состояние загрузки\r\n      setLoading(true);\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        setLoading(false);\r\n        return data;\r\n      } catch (e) {\r\n        //_ если ошибка\r\n        setLoading(false);\r\n        setError(e.message);\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => setError(null), []); //_ для очистки ошибки и возобновления работы\r\n\r\n  return { loading, request, error, clearError };\r\n};\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, request, error, clearError } = useHttp();\r\n\r\n  const apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const apiKey = \"apikey=b860ae4f50120b46e53bb6d38bbb7db4\";\r\n  const baseOffset = 180;\r\n\r\n  //_ получение всех персонажей\r\n  const getAllCharacters = async (offset = baseOffset) => {\r\n    const res = await request(\r\n      `${apiBase}characters?limit=9&offset=${offset}&${apiKey}`\r\n    );\r\n    // console.log(res);\r\n    // console.log(\"Current offset:\", offset);\r\n    return res.data.results.map(transformCharacter);\r\n  };\r\n  //_ получение персонажа по id\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${apiBase}/characters/${id}?&${apiKey}`);\r\n    // console.log(res);\r\n    return transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  //_ поиск по имени\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${apiBase}/characters?name=${name}&${apiKey}`);\r\n    // console.log(res.data.results.map(transformCharacter));\r\n    return res.data.results.map(transformCharacter);\r\n  };\r\n\r\n  //_ получение всех комиксов\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(\r\n      `${apiBase}comics?limit=8&offset=${offset}&${apiKey}`\r\n    );\r\n    // console.log(res.data.results.map(transformComics));\r\n    return res.data.results.map(transformComics);\r\n  };\r\n\r\n  //_ получение комикса по id\r\n  const getComic = async (id) => {\r\n    const res = await request(`${apiBase}comics/${id}?${apiKey}`);\r\n    // console.log(transformComics(res.data.results[0]));\r\n    return transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : \"There is no description for this character\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || \"There is no description\",\r\n      pageCount: comics.pageCount\r\n        ? `${comics.pageCount} p.`\r\n        : \"No information about the number of pages\",\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      language: comics.textObjects[0]?.language || \"en-us\",\r\n      price: comics.prices[0].price\r\n        ? `${comics.prices[0].price}$`\r\n        : \"not available\",\r\n      url: comics.urls[0].url,\r\n    };\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    clearError,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    getAllComics,\r\n    getComic,\r\n    getCharacterByName,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","img","ComicsList","comicsList","setComicsList","useState","newItemLoading","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","loading","error","getAllComics","useMarvelService","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","items","arr","map","item","i","CSSTransition","timeout","classNames","Link","to","concat","id","thumbnail","title","price","TransitionGroup","component","renderItems","errorMessage","spinner","Spinner","disabled","onClick","ComicsPage","_Fragment","request","clearError","useHttp","setLoading","setError","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","apiBase","apiKey","transformCharacter","char","name","description","slice","path","extension","homepage","urls","wiki","comics","transformComics","_comics$textObjects$","pageCount","language","textObjects","prices","getAllCharacters","results","getCharacter","res","getComic","getCharacterByName"],"sourceRoot":""}
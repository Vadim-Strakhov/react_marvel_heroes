{"version":3,"file":"static/js/682.38d212e8.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import \"./appBanner.scss\";\nimport avengers from \"../../resources/img/Avengers.png\";\nimport avengersLogo from \"../../resources/img/Avengers_logo.png\";\n\nconst AppBanner = () => {\n  return (\n    <div className=\"app__banner\">\n      <img src={avengers} alt=\"Avengers\" />\n      <div className=\"app__banner-text\">\n        New comics every week!\n        <br />\n        Stay tuned!\n      </div>\n      <img src={avengersLogo} alt=\"Avengers logo\" />\n    </div>\n  );\n};\n\nexport default AppBanner;\n","import img from \"./error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    //_ для обращения к папке publick\r\n    //   <img src={process.env.PUBLIC_URL + \"/error.gif\"} />\r\n    <img\r\n      style={{\r\n        display: \"block\",\r\n        width: \"250px\",\r\n        height: \"250px\",\r\n        objectFit: \"contain\",\r\n        margin: \"0 auto\",\r\n      }}\r\n      alt=\"img\"\r\n      src={img}\r\n    />\r\n  );\r\n};\r\nexport default ErrorMessage;\r\n","import \"./comicsList.scss\";\n\nimport React, { useState, useEffect } from \"react\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport { Link } from \"react-router-dom\";\n\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\n\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Spinner from \"../spinner/Spinner\";\n\nconst setContent = (process, Component, newItemLoading) => {\n  switch (process) {\n    case \"waiting\":\n      return <Spinner />;\n    case \"loading\":\n      return newItemLoading ? <Component /> : <Spinner />;\n    case \"confirmed\":\n      return <Component />;\n    case \"error\":\n      return <ErrorMessage />;\n    default:\n      throw new Error(\"Unexpected process state\");\n  }\n};\n\nconst ComicsList = () => {\n  const [comicsList, setComicsList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(100);\n  const [comicsEnded, setComicsEnded] = useState(false);\n\n  const { getAllComics, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllComics(offset)\n      .then(onComicsListLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  const onComicsListLoaded = (newComicsList) => {\n    let ended = false;\n    if (newComicsList.length > 8) {\n      ended = true;\n    }\n    setComicsList([...comicsList, ...newComicsList]);\n    setNewItemLoading(false);\n    setOffset(offset + 8);\n    setComicsEnded(ended);\n  };\n\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      return (\n        <CSSTransition key={item.id} timeout={500} classNames=\"comics__item\">\n          <li key={item.id + i} className=\"comics__item\">\n            <Link to={`/react_marvel_heroes/comics/${item.id}`}>\n              <img\n                src={item.thumbnail}\n                alt={item.title}\n                className=\"comics__item-img\"\n              />\n              <div className=\"comics__item-name\">{item.title}</div>\n              <div className=\"comics__item-price\">{item.price}</div>\n            </Link>\n          </li>\n        </CSSTransition>\n      );\n    });\n\n    return (\n      <ul className=\"comics__grid\">\n        <TransitionGroup component={null}>{items}</TransitionGroup>\n      </ul>\n    );\n  }\n\n  return (\n    <div className=\"comics__list\">\n      {setContent(process, () => renderItems(comicsList), newItemLoading)}\n      <button\n        disabled={newItemLoading}\n        style={{ display: comicsEnded ? \"none\" : \"block\" }}\n        className=\"button button__main button__long\"\n        onClick={() => onRequest(offset)}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nexport default ComicsList;\n","import ComicsList from \"../comicsList/ComicsList\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nconst ComicsPage = () => {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta name=\"description\" content=\"Page with list of our comics\" />\r\n        <title>Comics page</title>\r\n      </Helmet>\r\n      <AppBanner />\r\n      <ComicsList />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ComicsPage;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [process, setProcess] = useState(\"waiting\");\r\n\r\n  //_ запрос на сервер\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      //_ состояние загрузки\r\n      setProcess(\"loading\");\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        return data;\r\n      } catch (e) {\r\n        //_ если ошибка\r\n\r\n        setProcess(\"error\");\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => {\r\n    setProcess(\"loading\");\r\n  }); //_ для очистки ошибки и возобновления работы\r\n\r\n  return { request, clearError, process, setProcess };\r\n};\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { request, clearError, process, setProcess } = useHttp();\r\n\r\n  const apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const apiKey = \"apikey=b860ae4f50120b46e53bb6d38bbb7db4\";\r\n  const baseOffset = 180;\r\n\r\n  //_ получение всех персонажей\r\n  const getAllCharacters = async (offset = baseOffset) => {\r\n    const res = await request(\r\n      `${apiBase}characters?limit=9&offset=${offset}&${apiKey}`\r\n    );\r\n    // console.log(res);\r\n    // console.log(\"Current offset:\", offset);\r\n    return res.data.results.map(transformCharacter);\r\n  };\r\n  //_ получение персонажа по id\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${apiBase}/characters/${id}?&${apiKey}`);\r\n    // console.log(res);\r\n    return transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  //_ поиск по имени\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${apiBase}/characters?name=${name}&${apiKey}`);\r\n    // console.log(res.data.results.map(transformCharacter));\r\n    return res.data.results.map(transformCharacter);\r\n  };\r\n\r\n  //_ получение всех комиксов\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(\r\n      `${apiBase}comics?limit=8&offset=${offset}&${apiKey}`\r\n    );\r\n    // console.log(res.data.results.map(transformComics));\r\n    return res.data.results.map(transformComics);\r\n  };\r\n\r\n  //_ получение комикса по id\r\n  const getComic = async (id) => {\r\n    const res = await request(`${apiBase}comics/${id}?${apiKey}`);\r\n    // console.log(transformComics(res.data.results[0]));\r\n    return transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : \"There is no description for this character\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || \"There is no description\",\r\n      pageCount: comics.pageCount\r\n        ? `${comics.pageCount} p.`\r\n        : \"No information about the number of pages\",\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      language: comics.textObjects[0]?.language || \"en-us\",\r\n      price: comics.prices[0].price\r\n        ? `${comics.prices[0].price}$`\r\n        : \"not available\",\r\n      url: comics.urls[0].url,\r\n    };\r\n  };\r\n\r\n  return {\r\n    process,\r\n    setProcess,\r\n    clearError,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    getAllComics,\r\n    getComic,\r\n    getCharacterByName,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","img","setContent","process","Component","newItemLoading","Spinner","Error","ComicsList","comicsList","setComicsList","useState","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","getAllComics","setProcess","useMarvelService","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","arr","items","map","item","i","CSSTransition","timeout","classNames","Link","to","concat","id","thumbnail","title","price","TransitionGroup","component","renderItems","disabled","onClick","ComicsPage","_Fragment","Helmet","name","content","request","clearError","useHttp","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","status","json","e","apiBase","apiKey","transformCharacter","char","description","slice","path","extension","homepage","urls","wiki","comics","transformComics","_comics$textObjects$","pageCount","language","textObjects","prices","getAllCharacters","data","results","getCharacter","res","getComic","getCharacterByName"],"sourceRoot":""}
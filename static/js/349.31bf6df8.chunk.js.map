{"version":3,"file":"static/js/349.31bf6df8.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/appBanner/AppBanner.js","components/pages/ComicsPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import img from \"./error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    //_ для обращения к папке publick\r\n    //   <img src={process.env.PUBLIC_URL + \"/error.gif\"} />\r\n    <img\r\n      style={{\r\n        display: \"block\",\r\n        width: \"250px\",\r\n        height: \"250px\",\r\n        objectFit: \"contain\",\r\n        margin: \"0 auto\",\r\n      }}\r\n      alt=\"img\"\r\n      src={img}\r\n    />\r\n  );\r\n};\r\nexport default ErrorMessage;\r\n","import React, { useState, useEffect } from \"react\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport { Link } from \"react-router-dom\";\n\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\n\nimport \"./comicsList.scss\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Spinner from \"../spinner/Spinner\";\n\nconst ComicsList = () => {\n  const [comicsList, setComicsList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(100);\n  const [comicsEnded, setComicsEnded] = useState(false);\n\n  const { loading, error, getAllComics } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllComics(offset).then(onComicsListLoaded);\n  };\n\n  const onComicsListLoaded = (newComicsList) => {\n    let ended = false;\n    if (newComicsList.length > 8) {\n      ended = true;\n    }\n    setComicsList([...comicsList, ...newComicsList]);\n    setNewItemLoading(false);\n    setOffset(offset + 8);\n    setComicsEnded(ended);\n  };\n\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      return (\n        <CSSTransition key={item.id} timeout={500} classNames=\"comics__item\">\n          <li key={item.id + i} className=\"comics__item\">\n            <Link to={`/react_marvel_heroes/comics/${item.id}`}>\n              <img\n                src={item.thumbnail}\n                alt={item.title}\n                className=\"comics__item-img\"\n              />\n              <div className=\"comics__item-name\">{item.title}</div>\n              <div className=\"comics__item-price\">{item.price}</div>\n            </Link>\n          </li>\n        </CSSTransition>\n      );\n    });\n\n    return (\n      <ul className=\"comics__grid\">\n        <TransitionGroup component={null}>{items}</TransitionGroup>\n      </ul>\n    );\n  }\n\n  const items = renderItems(comicsList);\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n  return (\n    <div className=\"comics__list\">\n      {errorMessage}\n      {spinner}\n      {items}\n      <button\n        disabled={newItemLoading}\n        style={{ display: comicsEnded ? \"none\" : \"block\" }}\n        className=\"button button__main button__long\"\n        onClick={() => onRequest(offset)}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nexport default ComicsList;\n","import \"./appBanner.scss\";\nimport avengers from \"../../resources/img/Avengers.png\";\nimport avengersLogo from \"../../resources/img/Avengers_logo.png\";\n\nconst AppBanner = () => {\n  return (\n    <div className=\"app__banner\">\n      <img src={avengers} alt=\"Avengers\" />\n      <div className=\"app__banner-text\">\n        New comics every week!\n        <br />\n        Stay tuned!\n      </div>\n      <img src={avengersLogo} alt=\"Avengers logo\" />\n    </div>\n  );\n};\n\nexport default AppBanner;\n","import ComicsList from \"../comicsList/ComicsList\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\nconst ComicsPage = () => {\r\n  return (\r\n    <>\r\n      <AppBanner />\r\n      <ComicsList />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ComicsPage;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  //_ запрос на сервер\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      //_ состояние загрузки\r\n      setLoading(true);\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        setLoading(false);\r\n        return data;\r\n      } catch (e) {\r\n        //_ если ошибка\r\n        setLoading(false);\r\n        setError(e.message);\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => setError(null), []); //_ для очистки ошибки и возобновления работы\r\n\r\n  return { loading, request, error, clearError };\r\n};\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, request, error, clearError } = useHttp();\r\n\r\n  const apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const apiKey = \"apikey=b860ae4f50120b46e53bb6d38bbb7db4\";\r\n  const baseOffset = 180;\r\n\r\n  //_ получение всех персонажей\r\n  const getAllCharacters = async (offset = baseOffset) => {\r\n    const res = await request(\r\n      `${apiBase}characters?limit=9&offset=${offset}&${apiKey}`\r\n    );\r\n    // console.log(res);\r\n    // console.log(\"Current offset:\", offset);\r\n    return res.data.results.map(transformCharacter);\r\n  };\r\n  //_ получение персонажа по id\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${apiBase}/characters/${id}?&${apiKey}`);\r\n    // console.log(res);\r\n    return transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : \"There is no description for this character\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(\r\n      `${apiBase}comics?limit=8&offset=${offset}&${apiKey}`\r\n    );\r\n    // console.log(res.data.results.map(transformComics));\r\n    return res.data.results.map(transformComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${apiBase}comics/${id}?${apiKey}`);\r\n    console.log(transformComics(res.data.results[0]));\r\n    return transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || \"There is no description\",\r\n      pageCount: comics.pageCount\r\n        ? `${comics.pageCount} p.`\r\n        : \"No information about the number of pages\",\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      language: comics.textObjects[0]?.language || \"en-us\",\r\n      price: comics.prices[0].price\r\n        ? `${comics.prices[0].price}$`\r\n        : \"not available\",\r\n      url: comics.urls[0].url,\r\n    };\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    clearError,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    getAllComics,\r\n    getComic,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","alt","src","img","ComicsList","comicsList","setComicsList","useState","newItemLoading","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","loading","error","getAllComics","useMarvelService","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","items","arr","map","item","i","CSSTransition","timeout","classNames","children","className","_jsxs","Link","to","concat","id","thumbnail","title","price","TransitionGroup","component","renderItems","errorMessage","spinner","Spinner","disabled","onClick","AppBanner","avengers","avengersLogo","ComicsPage","_Fragment","request","clearError","useHttp","setLoading","setError","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","apiBase","apiKey","transformCharacter","char","name","description","slice","path","extension","homepage","urls","wiki","comics","transformComics","_comics$textObjects$","pageCount","language","textObjects","prices","getAllCharacters","results","getCharacter","res","getComic","console","log"],"sourceRoot":""}
{"version":3,"file":"static/js/156.3f771459.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/pages/SinglePage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import \"./appBanner.scss\";\nimport avengers from \"../../resources/img/Avengers.png\";\nimport avengersLogo from \"../../resources/img/Avengers_logo.png\";\n\nconst AppBanner = () => {\n  return (\n    <div className=\"app__banner\">\n      <img src={avengers} alt=\"Avengers\" />\n      <div className=\"app__banner-text\">\n        New comics every week!\n        <br />\n        Stay tuned!\n      </div>\n      <img src={avengersLogo} alt=\"Avengers logo\" />\n    </div>\n  );\n};\n\nexport default AppBanner;\n","import img from \"./error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    //_ для обращения к папке publick\r\n    //   <img src={process.env.PUBLIC_URL + \"/error.gif\"} />\r\n    <img\r\n      style={{\r\n        display: \"block\",\r\n        width: \"250px\",\r\n        height: \"250px\",\r\n        objectFit: \"contain\",\r\n        margin: \"0 auto\",\r\n      }}\r\n      alt=\"img\"\r\n      src={img}\r\n    />\r\n  );\r\n};\r\nexport default ErrorMessage;\r\n","import { useParams } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\nconst SinglePage = ({ Component, dataType }) => {\r\n  const { id } = useParams();\r\n  const [data, setData] = useState(null);\r\n  const { loading, error, getComic, getCharacter, clearError } =\r\n    useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateData();\r\n  }, [id]);\r\n\r\n  const updateData = () => {\r\n    clearError();\r\n\r\n    switch (dataType) {\r\n      case \"comic\":\r\n        getComic(id).then(onDataLoaded);\r\n        break;\r\n      case \"character\":\r\n        getCharacter(id).then(onDataLoaded);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const onDataLoaded = (data) => {\r\n    setData(data);\r\n  };\r\n\r\n  const errorMessage = error ? <ErrorMessage /> : null; //_ если произошла ошибка\r\n  const spinner = loading ? <Spinner /> : null; //_ спиннер загрузки\r\n  const content = !(loading || error || !data) ? (\r\n    <Component data={data} />\r\n  ) : null; //_ если все загрузилось\r\n\r\n  return (\r\n    <>\r\n      <AppBanner />\r\n      {errorMessage}\r\n      {spinner}\r\n      {content}\r\n    </>\r\n  );\r\n};\r\nexport default SinglePage;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  //_ запрос на сервер\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      //_ состояние загрузки\r\n      setLoading(true);\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        setLoading(false);\r\n        return data;\r\n      } catch (e) {\r\n        //_ если ошибка\r\n        setLoading(false);\r\n        setError(e.message);\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => setError(null), []); //_ для очистки ошибки и возобновления работы\r\n\r\n  return { loading, request, error, clearError };\r\n};\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, request, error, clearError } = useHttp();\r\n\r\n  const apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const apiKey = \"apikey=b860ae4f50120b46e53bb6d38bbb7db4\";\r\n  const baseOffset = 180;\r\n\r\n  //_ получение всех персонажей\r\n  const getAllCharacters = async (offset = baseOffset) => {\r\n    const res = await request(\r\n      `${apiBase}characters?limit=9&offset=${offset}&${apiKey}`\r\n    );\r\n    // console.log(res);\r\n    // console.log(\"Current offset:\", offset);\r\n    return res.data.results.map(transformCharacter);\r\n  };\r\n  //_ получение персонажа по id\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${apiBase}/characters/${id}?&${apiKey}`);\r\n    // console.log(res);\r\n    return transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  //_ поиск по имени\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${apiBase}/characters?name=${name}&${apiKey}`);\r\n    // console.log(res.data.results.map(transformCharacter));\r\n    return res.data.results.map(transformCharacter);\r\n  };\r\n\r\n  //_ получение всех комиксов\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(\r\n      `${apiBase}comics?limit=8&offset=${offset}&${apiKey}`\r\n    );\r\n    // console.log(res.data.results.map(transformComics));\r\n    return res.data.results.map(transformComics);\r\n  };\r\n\r\n  //_ получение комикса по id\r\n  const getComic = async (id) => {\r\n    const res = await request(`${apiBase}comics/${id}?${apiKey}`);\r\n    // console.log(transformComics(res.data.results[0]));\r\n    return transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : \"There is no description for this character\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || \"There is no description\",\r\n      pageCount: comics.pageCount\r\n        ? `${comics.pageCount} p.`\r\n        : \"No information about the number of pages\",\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      language: comics.textObjects[0]?.language || \"en-us\",\r\n      price: comics.prices[0].price\r\n        ? `${comics.prices[0].price}$`\r\n        : \"not available\",\r\n      url: comics.urls[0].url,\r\n    };\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    clearError,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    getAllComics,\r\n    getComic,\r\n    getCharacterByName,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","img","_ref","Component","dataType","id","useParams","data","setData","useState","loading","error","getComic","getCharacter","clearError","useMarvelService","useEffect","updateData","then","onDataLoaded","errorMessage","spinner","Spinner","content","_Fragment","request","useHttp","setLoading","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","json","e","message","apiBase","apiKey","transformCharacter","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","getAllCharacters","offset","results","map","res","getAllComics","getCharacterByName"],"sourceRoot":""}